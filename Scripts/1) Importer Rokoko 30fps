import bpy
import os
import glob
import shutil 
import datetime
import numpy
import sys

#Last updated 2024-03-24
#This version is for faster cleaning of Rokoko mocap files, this assumes they are 30fps, and bakes them to 60.

#import necessary Modules

#!!Set your Workspace here!!
RenderSpace=('C:\\Users\\Courtland\\Desktop\\Rokoko')
os.chdir(RenderSpace)  

#This looks at all files ending in FBX, and picks the first one alphabetically.
directory = glob.glob('*.fbx')

if not directory:  
    print("List is empty, reload directory")
else:
    print("List has items")


print(directory[0])
RAWFBX=directory[0]


RAWFBXless=RAWFBX[:-4]
Split= RAWFBX.split('_')
prepMotion1=RAWFBXless.replace("_", " ")
prepMotion2=prepMotion1.replace("-", " ")
Motion=''.join(char for char in prepMotion2 if not char.isdigit())
print(Motion)
current_time = datetime.datetime.now()
Year=current_time.year
Month=current_time.month
Day=current_time.day

Today=str(Year) + '-' + str(Month) + '-' + str(Day)
print(Today)

#All the Motion Capture files are labelled similarly, this removes unneeded information. And adds a the file is being worked on.



#Now we create a folder, using the Motion name, and today's date.
Stamp=Motion+ ' ' + Today
print(Stamp)


ArchivePath = RenderSpace + '\\' + Stamp
print(ArchivePath)

os.makedirs(ArchivePath,exist_ok=True)

RenderSpaceFBX=RenderSpace+'\\'+RAWFBX
ArchivePathFBX=ArchivePath+'\\'+RAWFBX
print(RenderSpaceFBX)
print(ArchivePathFBX)
shutil.move(RenderSpaceFBX, ArchivePathFBX)

#We now save the working file into the recently created folder

ArchivePathblend=ArchivePath+'\\'+Stamp+' Unedited.blend'
print(ArchivePathblend)


#This purges any existing actions in the scene. To active, remove following 3 hashtags.
#actions = bpy.data.actions
#for action in actions:
    #bpy.data.actions.remove(action)

#This imports the desired motion, Automatic bone orientation makes the bones fall blender standard
bpy.ops.import_scene.fbx(filepath=ArchivePathFBX,automatic_bone_orientation=True)

if "RokokoFaceRoot" in bpy.data.objects:
    print("facial data, script not useable") 
else:
    print("No facial data, proceeding")

bpy.context.object.data.show_names = True
bpy.context.object.show_in_front = True


objects = bpy.context.scene.objects

# List to store armature names
armature_names = []

# Iterate over all objects
for obj in objects:
    # Check if the object is an armature
    if obj.type == 'ARMATURE':
        armature_names.append(obj.name)

# Print the list of armature names
print("Armatures in the scene:")
for name in armature_names:
    print(name)
    
    
#print all armature created, and selects last created one    
print(armature_names[-1])
ImportedMotion=armature_names[-1]


# Check if motion contains "mixamo"
if "mixamorig:Hips" in ImportedMotion:
    bpy.data.objects["mixamorig:Hips"].select_set(True)
elif "Reference" in ImportedMotion:
    bpy.data.objects["Reference"].select_set(True)
elif "Root" in ImportedMotion:
    bpy.data.objects["Root"].select_set(True)
else:
    print("Unexpected motion type")    
    
bpy.context.scene.render.fps = 60

if "mixamorig:Hips" in ImportedMotion:
    armature = bpy.data.objects['mixamorig:Hips']
elif "Reference" in ImportedMotion:
    armature = bpy.data.objects['Reference']
elif "Root" in ImportedMotion:
    armature = bpy.data.objects['Root']
else:
    print("Unexpected motion type")   



action = armature.animation_data.action
frame_range = action.frame_range
print(frame_range)
last_frame = action.frame_range[1]
print(last_frame)


#The following script bakes imported motion data to 60 fps
BakeTime=last_frame*2
print(BakeTime)
BT=int(numpy.floor(BakeTime))
print(BT)
bpy.ops.object.mode_set(mode='POSE')

bpy.context.scene.frame_end = BT
scene_end = bpy.context.scene.frame_end
print(scene_end)


if "mixamorig:Hips" in ImportedMotion:
    bpy.data.objects["mixamorig:Hips"].select_set(True)
elif "Reference" in ImportedMotion:
    bpy.data.objects["Reference"].select_set(True)
elif "Root" in ImportedMotion:
    bpy.data.objects["Root"].select_set(True)
else:
    print("Unexpected motion type")   

obj = bpy.context.active_object

if "Reference" not in ImportedMotion:
    bpy.context.scene.frame_set(3)
    bpy.ops.pose.select_all(action='SELECT')
    bpy.ops.anim.keyframe_insert_by_name(type="LocRotScale")
    bpy.ops.pose.copy()
    bpy.context.scene.frame_set(2)
    bpy.ops.pose.select_all(action='SELECT')
    bpy.ops.pose.paste(flipped=False)
    bpy.ops.anim.keyframe_insert_by_name(type="LocRotScale")
    bpy.context.scene.frame_set(1)
    bpy.ops.pose.select_all(action='SELECT')
    bpy.ops.pose.paste(flipped=False)
    bpy.ops.anim.keyframe_insert_by_name(type="LocRotScale")
    ("Intro poses corrected.")
else:
    print("Intro poses fine, not correction done.")

if "mixamorig:Hips" in ImportedMotion:
    bpy.data.objects["mixamorig:Hips"].select_set(True)
elif "Reference" in ImportedMotion:
    bpy.data.objects["Reference"].select_set(True)
elif "Root" in ImportedMotion:
    bpy.data.objects["Root"].select_set(True)
else:
    print("Unexpected motion type")   

bpy.ops.object.mode_set(mode='POSE')
bpy.ops.pose.select_all(action='SELECT')

obj = bpy.context.active_object


anim_data = obj.animation_data
selected_objects = bpy.context.selected_objects


for obj in selected_objects:
    # Get the animation data
    anim_data = obj.animation_data
    if anim_data:
        # Get all fcurves
        fcurves = anim_data.action.fcurves
        # Double the frame numbers of keyframes
        for fcurve in fcurves:
            for keyframe in fcurve.keyframe_points:
                keyframe.co.x *= 2
                
           
if "Reference" in ImportedMotion:
    bpy.ops.nla.bake(frame_start=1, frame_end=int(BakeTime), step=1, clean_curves=True, bake_types={'POSE'})
else: 
    bpy.ops.nla.bake(frame_start=3, frame_end=int(BakeTime), step=1, clean_curves=True, bake_types={'POSE'})


#We add a locator root to the imported motion. This make it easier to move, with out disrupting anyother data.
if "mixamorig:Hips" in ImportedMotion:
    bpy.data.objects["mixamorig:Hips"].select_set(True)
elif "Reference" in ImportedMotion:
    bpy.data.objects["Reference"].select_set(True)
elif "Root" in ImportedMotion:
    bpy.data.objects["Root"].select_set(True)
else:
    print("Unexpected motion type")   

if"mixamorig:Hips" in ImportedMotion:
    armature_name = "mixamorig:Hips" 
    bone_name = "mixamorig:Hips" 
    armature_obj = bpy.data.objects[armature_name]    
    if bone_name not in armature_obj.data.bones:
        # Bone doesn't exist, so create it:
        bpy.ops.object.mode_set(mode='EDIT')  # Switch to Edit mode
        edit_bone = armature_obj.data.edit_bones.new(bone_name)  # Create the bone
        edit_bone.head = (0, 0, 0)  # Set the bone's head position
        edit_bone.tail = (0, 15, 0)  # Set the bone's tail position
        arm = bpy.data.objects['mixamorig:Hips']
        bpy.ops.object.mode_set(mode='EDIT')
        arm.data.edit_bones['mixamorig:Spine'].parent = arm.data.edit_bones['mixamorig:Hips']
        arm.data.edit_bones['mixamorig:LeftUpLeg'].parent = arm.data.edit_bones['mixamorig:Hips']
        arm.data.edit_bones['mixamorig:RightUpLeg'].parent = arm.data.edit_bones['mixamorig:Hips']


bpy.ops.object.mode_set(mode='OBJECT')
bpy.ops.object.origin_set(type='ORIGIN_CURSOR', center='MEDIAN')

bpy.ops.object.mode_set(mode='EDIT')

new_bone = armature.data.edit_bones.new("Locator")

new_bone.head = (0, 0, 0)
new_bone.tail = (0, 25, 0)




if "mixamorig:Hips" in ImportedMotion:
    arm = bpy.data.objects['mixamorig:Hips']
    bpy.ops.object.mode_set(mode='EDIT')
    arm.data.edit_bones['mixamorig:Hips'].parent = arm.data.edit_bones['Locator']
elif "Root" in ImportedMotion:
    arm = bpy.data.objects['Root']
    py.ops.object.mode_set(mode='EDIT')
    arm.data.edit_bones['Hips'].parent = arm.data.edit_bones['Locator']
elif "Reference" in ImportedMotion:
    arm = bpy.data.objects['Reference']
    bpy.ops.object.mode_set(mode='EDIT')
    arm.data.edit_bones['Hips'].parent = arm.data.edit_bones['Locator']
else:
    print("Unexpected motion type")      

bpy.context.scene.frame_set(0)

bpy.ops.object.mode_set(mode='POSE')

bpy.ops.pose.select_all(action='SELECT')


#The following Script changes the blender scene to match the imported motion that is now at 60 fps.
obj = bpy.context.active_object
anim_data = obj.animation_data
action = anim_data.action


new_start_frame = bpy.context.scene.frame_start
new_end_frame = bpy.context.scene.frame_end

for fcurve in action.fcurves:
    for kf in fcurve.keyframe_points:
        kf.co[0] = ((kf.co[0] - action.frame_range[0]) / (action.frame_range[1] - action.frame_range[0])) * (new_end_frame - new_start_frame) + new_start_frame

action.frame_range = (1, BT)


if "mixamorig:Hips" in ImportedMotion:
    bpy.data.objects["mixamorig:Hips"].select_set(True)
elif "Reference" in ImportedMotion:
    bpy.data.objects["Reference"].select_set(True)
elif "Root" in ImportedMotion:
    bpy.data.objects["Root"].select_set(True)
else:
    print("Unexpected motion type")   

bpy.context.scene.tool_settings.transform_pivot_point = 'MEDIAN_POINT'

bpy.ops.object.mode_set(mode='POSE')
bpy.ops.pose.select_all(action='DESELECT')

scene = bpy.context.scene
last_frame = scene.frame_end

if "mixamorig:Hips" in ImportedMotion:
   armature_obj = bpy.data.objects['mixamorig:Hips']  
elif "Reference" in ImportedMotion:
    armature_obj = bpy.data.objects['Reference']  
elif "Root" in ImportedMotion:
    armature_obj = bpy.data.objects['Root']  
else:
    print("Unexpected motion type")   





bone = armature_obj.pose.bones['Locator'] 


bone['Test'] = 0  
bone['Date'] = 0 
bone['Source'] = 0 


bpy.ops.object.mode_set(mode='OBJECT')


if "mixamorig:Hips" in ImportedMotion:
    armature = bpy.data.objects['mixamorig:Hips']
elif "Reference" in ImportedMotion:
    armature = bpy.data.objects['Reference']
elif "Root" in ImportedMotion:
    armature = bpy.data.objects['Root']
else:
    print("Unexpected motion type")   



Version= bpy.app.version_string


#The Galtis Rig has a Locator
#Let's add key info to it
bone = armature.pose.bones['Locator']


properties_to_rename = {
    'Test': Version,
    'Date': Today,
    'Source': RAWFBX
}

for old_prop_name, new_prop_name in properties_to_rename.items():
    # Check if the old property exists
    if old_prop_name in bone.keys():
        bone[new_prop_name] = bone[old_prop_name]
        del bone[old_prop_name]
    else:
        print(f"No property named '{old_prop_name}' found on {bone.name}")


#We just added Blender Version, Date, and Source motion to Locator Root's custom properties.
#This helps with version control, and should a motion go bad, it can be investigate easily.



#Lastly save the file.
bpy.ops.wm.save_as_mainfile(filepath=ArchivePathblend)

